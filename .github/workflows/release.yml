# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
      tag_exists: ${{ steps.check_tag_exists.outputs.exists }}
      version: ${{ steps.get_version.outputs.version }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: release
        run: npx projen@0.91.20 release
      - name: Get Version
        id: get_version
        run: echo "version=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT
      - name: Check if version has already been tagged
        id: check_tag_exists
        run: |-
          TAG=$(cat dist/releasetag.txt)
          ([ ! -z "$TAG" ] && git ls-remote -q --exit-code --tags origin $TAG && (echo "exists=true" >> $GITHUB_OUTPUT)) || (echo "exists=false" >> $GITHUB_OUTPUT)
          cat $GITHUB_OUTPUT
      - name: Check for new commits
        id: git_remote
        run: |-
          echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build-artifact
          path: dist
          overwrite: true
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.sha }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  package-go:
    needs:
      - release
      - release_github
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      VERSION: needs.release.outputs.version
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: go.sum
          go-version-file: go.mod
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Package Go
        env:
          GOARCH: ${{ matrix.arch }}
          GOOS: ${{ matrix.platform }}
          VERSION: ${{ env.VERSION }}
        run: npx projen@0.91.20 package-go
      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: pulumilsp-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz
          overwrite: true
          path: ./dist/pulumilsp-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz
    strategy:
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
            platform: linux
          - arch: amd64
            os: macos-latest
            platform: darwin
          - arch: arm64
            os: macos-latest
            platform: darwin
  package-vsce:
    needs:
      - release
      - release_github
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERSION: needs.release.outputs.version
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install Deps
        run: cd editors/vscode && yarn install --check-files --frozen-lockfile
      - name: Package vsce
        env:
          ARCH: ${{ matrix.arch }}
          PLATFORM: ${{ matrix.platform }}
          VERSION: ${{ env.VERSION }}
        run: npx projen@0.91.20 package-vsce
      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: pulumilsp-client-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}
          overwrite: true
          path: ./dist/pulumilsp-client-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.vsix
    strategy:
      matrix:
        include:
          - arch: x64
            platform: linux
          - arch: arm64
            platform: linux
          - arch: x64
            platform: darwin
          - arch: arm64
            platform: darwin
          - arch: x64
            platform: win32
  update-release:
    needs:
      - package-vsce
      - package-go
      - release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERSION: needs.release.outputs.version
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist
          pattern: pulumilsp-*
      - name: Upload Release
        env:
          VERSION: ${{ env.VERSION }}
        run: gh release upload $VERSION dist/*
